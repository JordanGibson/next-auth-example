generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?               @map("email_verified")
  image                 String?
  accounts              Account[]
  sessions              Session[]
  build_label           build_label[]
  comment               comment[]
  suite_favourite       suite_favourite[]
  suite_label           suite_label[]
  test_label            test_label[]
  test_occurrence_label test_occurrence_label[]
  theme                 theme                   @default(dark)

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model build {
  id                   Int                    @id
  suite_id             String                 @db.VarChar(255)
  tenant               tenant?                @relation(fields: [tenantId], references: [id])
  state                build_state
  status               String?
  suite                suite                  @relation(fields: [suite_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  build_comment        build_comment[]
  build_label          build_label[]
  test_occurrence      test_occurrence[]
  tenantId             String?                @db.VarChar(255)
  build_double_failure build_double_failure[]
  build_details        build_details          @relation(fields: [id], references: [build_id], onDelete: Cascade)
}

model build_details {
  build_id   Int       @id @unique
  start_date DateTime?
  end_date   DateTime?
  duration   Int?
  passed     Int?
  failed     Int?
  ignored    Int?
  branch     String?
  build      build?
}

model build_label {
  build_id Int
  label_id String @db.VarChar(255)
  added_by User   @relation(fields: [userId], references: [id])
  build    build  @relation(fields: [build_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  label    label  @relation(fields: [label_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId   String @db.VarChar(255)

  @@id([build_id, label_id, userId])
}

model comment {
  id                      String                    @id @default(cuid()) @db.VarChar(255)
  user_id                 String                    @db.VarChar(255)
  entity_id               String                    @db.VarChar(255)
  entity_type             String                    @db.VarChar(255)
  content                 String                    @db.VarChar(255)
  user                    User                      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  build_comment           build_comment[]
  suite_comment           suite_comment[]
  test_comment            test_comment[]
  test_occurrence_comment test_occurrence_comment[]
}

model label {
  id                    String                  @id @default(cuid()) @db.VarChar(255)
  name                  String                  @db.VarChar(255)
  build_label           build_label[]
  suite_label           suite_label[]
  test_label            test_label[]
  test_occurrence_label test_occurrence_label[]
}

model suite {
  id              String            @id @db.VarChar(255)
  description     String            @db.VarChar(255)
  name            String            @db.VarChar(255)
  index           Boolean           @default(false)
  build           build[]
  suite_comment   suite_comment[]
  suite_favourite suite_favourite[]
  suite_label     suite_label[]
  test            test[]
}

model suite_comment {
  suite_id   String  @db.VarChar(255)
  comment_id String  @db.VarChar(255)
  comment    comment @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  suite      suite   @relation(fields: [suite_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([suite_id, comment_id])
}

model suite_favourite {
  suite_id String @db.VarChar(255)
  user_id  String @db.VarChar(255)
  suite    suite  @relation(fields: [suite_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user     User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([suite_id, user_id])
}

model suite_label {
  suite_id String @db.VarChar(255)
  label_id String @db.VarChar(255)
  added_by User   @relation(fields: [userId], references: [id])
  label    label  @relation(fields: [label_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  suite    suite  @relation(fields: [suite_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId   String @db.VarChar(255)

  @@id([suite_id, label_id, userId])
}

model test {
  class_name           String                 @id @db.VarChar(255)
  suite_id             String                 @db.VarChar(255)
  suite                suite                  @relation(fields: [suite_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_comment         test_comment[]
  test_label           test_label[]
  test_occurrence      test_occurrence[]
  build_double_failure build_double_failure[]
}

model test_comment {
  test_class_name String  @db.VarChar(255)
  comment_id      String  @db.VarChar(255)
  comment         comment @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test            test    @relation(fields: [test_class_name], references: [class_name], onDelete: NoAction, onUpdate: NoAction)

  @@id([test_class_name, comment_id])
}

model test_label {
  test_class_name String @db.VarChar(255)
  label_id        String @db.VarChar(255)
  added_by        User   @relation(fields: [userId], references: [id])
  label           label  @relation(fields: [label_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test            test   @relation(fields: [test_class_name], references: [class_name], onDelete: NoAction, onUpdate: NoAction)
  userId          String @db.VarChar(255)

  @@id([test_class_name, label_id, userId])
}

model test_occurrence {
  id                      String                    @id @db.VarChar(255)
  build_id                Int
  test_class_name         String                    @db.VarChar(255)
  status                  String                    @db.VarChar(255)
  duration                Int
  href                    String                    @db.VarChar(255)
  ignored                 Boolean
  order                   Int
  details                 String?
  build                   build                     @relation(fields: [build_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test                    test                      @relation(fields: [test_class_name], references: [class_name], onDelete: NoAction, onUpdate: NoAction)
  test_occurrence_comment test_occurrence_comment[]
  test_occurrence_label   test_occurrence_label[]
}

model test_occurrence_comment {
  test_occurrence_id String          @db.VarChar(255)
  comment_id         String          @db.VarChar(255)
  comment            comment         @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_occurrence    test_occurrence @relation(fields: [test_occurrence_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([test_occurrence_id, comment_id])
}

model test_occurrence_label {
  test_occurrence_id String          @db.VarChar(255)
  label_id           String          @db.VarChar(255)
  added_by           User            @relation(fields: [userId], references: [id])
  label              label           @relation(fields: [label_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_occurrence    test_occurrence @relation(fields: [test_occurrence_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId             String          @db.VarChar(255)

  @@id([test_occurrence_id, label_id, userId])
}

model build_comment {
  build_id   Int
  comment_id String  @db.VarChar(255)
  build      build   @relation(fields: [build_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comment    comment @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([build_id, comment_id])
}

model build_double_failure {
  build           build  @relation(fields: [build_id], references: [id])
  test            test   @relation(fields: [test_class_name], references: [class_name])
  build_id        Int
  test_class_name String @db.VarChar(255)

  @@id([build_id, test_class_name])
}

model tenant {
  id               String           @id @db.VarChar(255)
  password         String?          @db.VarChar(255)
  version          String?          @db.VarChar(255)
  name             String?          @db.VarChar(255)
  testType         String?          @db.VarChar(255)
  confidence_level confidence_level
  build            build[]
}

enum build_state {
  queued
  running
  finished
  deleted
  unknown
}

enum theme {
  light
  dark
  cupcake
  halloween
  dracula
  acid
  night
  coffee
}

enum confidence_level {
  preview
  prod
  trunkpreview
  trunkprod
  trunkinternal
  unknown
}
